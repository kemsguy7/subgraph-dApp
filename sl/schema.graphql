type StakingProtocol @entity {
  id: ID!
  address: Bytes!
  stakingToken: Bytes!
  totalStaked: BigInt!
  currentRewardRate: BigInt!
  initialApr: BigInt!
  minLockDuration: BigInt!
  aprReductionPerThousand: BigInt!
  emergencyWithdrawPenalty: BigInt!
  totalUsers: BigInt!
  totalStakePositions: BigInt!
  totalWithdrawals: BigInt!
  totalEmergencyWithdrawals: BigInt!
  totalRewardsClaimed: BigInt!
  users: [User!]! @derivedFrom(field: "protocol")
  stakePositions: [StakePosition!]! @derivedFrom(field: "protocol")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "protocol")
  rewardClaims: [RewardClaim!]! @derivedFrom(field: "protocol")
  emergencyWithdrawals: [EmergencyWithdrawal!]! @derivedFrom(field: "protocol")
  rewardRateUpdates: [RewardRateUpdate!]! @derivedFrom(field: "protocol")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type User @entity {
  id: ID!
  address: Bytes!
  protocol: StakingProtocol!
  totalStaked: BigInt!
  currentStaked: BigInt!
  pendingRewards: BigInt!
  stakePositions: [StakePosition!]! @derivedFrom(field: "user")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "user")
  rewardClaims: [RewardClaim!]! @derivedFrom(field: "user")
  emergencyWithdrawals: [EmergencyWithdrawal!]! @derivedFrom(field: "user")
  firstStakedAt: BigInt
  lastStakedAt: BigInt
  lastWithdrawnAt: BigInt
  lastClaimedAt: BigInt
  canWithdraw: Boolean!
  timeUntilUnlock: BigInt
}

type StakePosition @entity {
  id: ID!
  user: User!
  protocol: StakingProtocol!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  withdrawn: Boolean!
  emergencyWithdrawn: Boolean!
  withdrawnAt: BigInt
  rewards: [RewardClaim!]! @derivedFrom(field: "stakePosition")
}

type Withdrawal @entity {
  id: ID!
  user: User!
  protocol: StakingProtocol!
  stakePosition: StakePosition!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  newTotalStaked: BigInt!
  rewardsAccrued: BigInt!
  currentRewardRate: BigInt!
}

type EmergencyWithdrawal @entity {
  id: ID!
  user: User!
  protocol: StakingProtocol!
  stakePosition: StakePosition!
  amount: BigInt!
  penalty: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  newTotalStaked: BigInt!
}

type RewardClaim @entity {
  id: ID!
  user: User!
  protocol: StakingProtocol!
  stakePosition: StakePosition
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  newPendingRewards: BigInt!
}

type RewardRateUpdate @entity {
  id: ID!
  protocol: StakingProtocol!
  oldRate: BigInt!
  newRate: BigInt!
  timestamp: BigInt!
  totalStaked: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
